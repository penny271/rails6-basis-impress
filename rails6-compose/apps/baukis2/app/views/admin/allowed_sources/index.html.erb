<%# ¥ 2.ch5.2.2 許可IPアドレスの管理 %>
<% @title = "許可IPアドレス⼀覧" %>
<h1><%= @title %></h1>

<div id="generic-form" class="table-wrapper">
  <div>
    <%= render "new_allowed_source" %>
  </div>

  <%# ¥ 2.ch5.2.6 許可IPアドレスの一括削除フォーム %>
  <%# - これまでの用法とは異なり、 model オプションを指定せずに form_with メソッドを使用しています。この場合、特定のモデルオブジェクトと結びつかないフォームが生成されます。 fields_for メソッドに指定する index オプションについては、本編18-3-1項「個人電話番号の入力欄表示」で説明しました。複数のオブジェクトを含むフォームにおいて、この index オプションに与えた数値がオブジェクトを識別するための番号となります。 fields_for ブロックの内側では隠しフィールドとして id 属性の値が埋め込まれ、_destroy 属性のためのチェックボックスが生成されます（22行目）。 AllowedSource モデルに _destroy 属性を追加します。 %>
  <%= form_with scope: "form", url: :delete_admin_allowed_sources,
    method: :delete do |f| %>
    <table class="listing">
      <tr>
        <th>削除</th>
        <th>IPアドレス</th>
        <th>作成⽇時</th>
      </tr>
      <% @allowed_sources.each_with_index do |s, index| %>
        <% p = AllowedSourcePresenter.new(s, self) %>
        <%= f.fields_for :allowed_sources, s, index: index do |ff| %>
          <%# ! IDを持つ隠しフィールド(ff.hidden_field :id)を含めることで、フォームが送信されたときにAllowedSourceの各レコードのIDがサーバーに返されるようになります。どれを削除すればいいかサーバーに知らせるため 隠しフィールドが必要となる %>
          <%= ff.hidden_field :id %>
          <tr>
            <%# ! _destroy属性を付与している %>
            <td class="actions"><%= ff.check_box :_destroy %></td>
            <td class="ip"><%= p.ip_address %></td>
            <td class="date"><%= p.created_at %></td>
          </tr>
        <% end %>
      <% end %>
    </table>
    <div class="buttons">
      <%= f.submit "チェックしたIPアドレスを削除",
        data: { confirmed: "本当に削除しますか。" } %>
    </div>
  <% end %>
</div>

<%# ¥ <%= f.fields_for :allowed_sources, s, index: index do |ff| %> %>
<%# ¥ fields_forはRailsフォームヘルパーで、関連するモデルや複雑なRubyオブジェクトに対してネストされたフォームフィールドを作成できます。このケースでは、メインフォーム内の各AllowedSourceオブジェクト専用のフィールドを作成するために使用しています。 %>
<%# # ¥ 2.ch5.2.7 許可IPアドレスの一括削除 説明
# 許可IPアドレスの一括削除フォームからは、次のような構造のパラメータが送られてきます。
# { allowed_sources: { "0" => { id: "1", _destroy: "0" }, "1" => { id: "2", _destroy: "1" }, "2" => { id: "3", _destroy: "1" }, "3" => { id: "4", _destroy: "0" } } }

# この場合に、idが2と3の AllowedSource オブジェクトを削除するのが、この delete メソッドの目的です。

# - allowed_sources パラメータの値がハッシュである場合、 values メソッドは次のような配列を返します。
# [ { id: "1", _destroy: "0" }, { id: "2", _destroy: "1" }, { id: "3", _destroy: "1" }, { id: "4", _destroy: "0" } ]

# 上記を下記のように処理する
# ids = []
# params[:allowed_sources].values.each do |hash|
#   if hash[:_destroy] == "1"
#     ids << hash[:id]
#   end
# end

# each メソッドで配列の要素（ハッシュ）を１個ずつ取り出し、そのハッシュの :destroy キーの値が "1" である場合は、:id キーの値を配列 ids に加えています。ループが終了した時点では、配列 ids に削除すべき AllowedSource オブジェクトの主キーがたまります。 これを用いて allowed_sources テーブルから該当するレコードを一括削除します（13行目）。

# AllowedSource.where(namespace: "staff", id: ids).delete_all %>