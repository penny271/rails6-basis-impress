<%# fields_forメソッドの文脈では、index: indexの使用は、:indexオプションの値を指定することであり、ネストされた属性のように繰り返しブロック内で使用されるときに、フォームフィールド名がどのように生成されるかを決定します。 %>

<%# ¥ これまでの fields_for メソッドと異なり、 index オプションが指定されています。このオプションに指定される値は、部分テンプレート_customer_fields.html.erb に由来します。関連部分（15～17行）はこうなっていましたね。 p.object.personal_phones.each_with_index do |phone, index| m << render("phone_fields", f: ff, phone: phone, index: 【index】) end 下線を引いた部分のブロック引数 index には、0と1が順にセットされます。この0と1が部分テンプレート_phone_fields.html.erb に渡されて fields_for メソッドの index オプションに指定されるのです。 このオプションの役割を理解するため、指定しなかった場合と指定した場合で何が変化するかを見てみましょう。 変化するのは input 要素の name 属性の値です。 index オプションを指定しなかった場合、個人電話番号入力欄の name は form[customer][phones][number] となります。他方、 index オプションに0を指定した場合、それが form[customer][phones][0][number] に変わります。個人電話番号の入力欄は2個存在するので、それらを識別するために index オプションの指定が必要なのです %>
<%= f.fields_for :phones, phone, index: index do |ff| %>
  <%= markup(:li) do |m|
    m << ff.text_field(:number)
    m << ff.check_box(:primary)
    m << ff.label(:primary, "優先")
  end %>
<% end %>

<%#  ¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥  %>

<%
=begin
%>

form[customer][phones][0][number]という名前構造は、fields_forメソッドがフォーム入力の名前を生成する方法と、提供された:indexオプションの組み合わせから導き出されます。ステップごとに分解してみましょう：

<%= f.fields_for :phones, phone, index: index do |ff| %> ここでfはフォームビルダーです。

ここで、fはメインフォームのフォームビルダオブジェクトです（フォーム入力の命名構造から、おそらくCustomerオブジェクト用です）。
:phonesはRailsに、顧客のphoneアソシエーションを扱っていることを伝えます。
index:indexオプションは、ネストされた各電話番号のフィールドセットが一意のインデックスを持つことを保証します。
ff.text_field(:number)

この行は、ネストされたフォームビルダff（現在の電話オブジェクトに固有）を使って、電話のnumber属性用のテキストフィールドを作成しています。
ffはネストされた属性（顧客の電話）用のフォームビルダであることを認識しています。したがって、入力の名前を生成するときは、そのコンテキストの中で行います。
提供された情報を考えると

という情報があります： これはプライマリフォームビルダーの名前(f)に基づく接頭辞です。これは文字通り「フォーム」ではなく、トップレベルのフォーム名を表すもので、おそらくモデルのクラス名（たとえば customer）から派生したものでしょう。

[customer]： フォームが関連付けられているメインモデルを表します。これは主フォームビルダ f に基づいて推測されます。

[phones]： これはfields_forに渡されたシンボル:phonesに由来し、関連付けの名前を示します。

[0]: これは電話のリストにおける現在の電話オブジェクトのインデックスを表します。fields_forのindex: indexオプションによって提供されます。

[番号]： これは属性名で、ff.text_field(:number)によって指定されます。

これらすべてのパーツを組み合わせると、form[customer][phones][0][number]という入力名構造になります。この構造により、フォームが送信されたときに、Railsはパラメータ内のネストされた属性を正しく解釈し、どの電話オブジェクトの番号属性を更新 (または作成) すべきかを知ることができます。

<%
=end
%>

<%#  ¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥  %>

<%
=begin
%>

  _customer_fields.html.erbより

        p.object.personal_phones.each_with_index do |phone, index|
          m << render("phone_fields", f: ff, phone: phone, index: index)
        end
<%
=end
%>

<%#  ¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥  %>

<%
=begin
%>

確かに！fields_forメソッドは、ネストされたフォームフィールドを生成するためのRailsフォームヘルパーです。has_manyやhas_oneの関連付けを持つモデルを扱うフォームや、ネストした属性を受け付けるモデルによく使われます。

使い方を説明しましょう：

<%= f.fields_for :phones, phone, index: index do |ff| %>
フォームフィールドを指定します。

phones： これはアソシエーション名です。このコンテキストでは、フォームビルダオブジェクトfによって表されるモデルオブジェクトの電話の関連付けを指します。

phone： これはネストされたフォームフィールドが生成される特定のオブジェクトです。電話のコレクションを反復処理する場合、phoneは反復処理における現在の電話になります。特定のオブジェクトやオブジェクトのコレクションを操作していない場合は、この引数を省略できます。

index: インデックス： ネストされたフォームフィールドのインデックスを指定します。これは、関連付けられたオブジェクトの配列を扱っていて、ネストされたフィールドの各セットを一意に識別する必要がある場合に特に役立ちます。たとえば、JavaScript を使って動的にフィールドを追加したり削除したりする場合に役立ちます。通常は配列記法を使います。

do |ff|: を実行します： このブロックには、関連オブジェクト（phone）にスコープされた新しいフォームビルダオブジェクト（この場合はff）が提供されます。このブロックの中では、メインオブジェクトのフィールドを生成するために f を使うのと同じように、ff を使って関連する電話オブジェクトのフィールドを生成することができます。

<%
=end
%>
