<%# ¥20230813 フォームビルダーのインスタンスメソッド fields_for を用いて、フォームの対象となるオブジェクトを切り替えています。このメソッドは2つの引数を取ります。第1引数が「レコード名」で、第2引数が対象となるオブジェクトです。 %>
<%# - まとめると f はメインのフォームモデル @customer_form のフォームビルダです。ff は @customer_form に関連付けられた顧客用のネストされたフォームビルダーです。f は全体的なフォームを処理し、ff は顧客に関連するフィールドを処理します。これにより、@customer_form 全体のコンテキスト内で Customer オブジェクトの属性を管理することができます。 %>

<%# ¥ Railsのフォームビルダのコンテキストでは、f.objectはフォームビルダ（f）がラップしている、または関連付けられているオブジェクトを指します。 %>
<%# 分解してみましょう： %>
<%# ^ f: これはフォームビルダのインスタンスです。form_with modelを実行すると customer_formとすると、Railsはフォームフィールドの生成に役立つフォームビルダのインスタンスを自動的に生成します。このフォームビルダのインスタンスは通常、ブロック内でfで参照されます。%>

<%#-  f.objectです： フォームビルダ内で、objectはフォームビルダがラップしている元のオブジェクト（またはモデル）を返すメソッドです。具体的な例では、form_with model とします： とすると、f.object は @customer_form のインスタンスを返します。 %>

<%#  - customer_form.rbよりこのように設定しているので f.object.customer.home_addressとなる!! build_home_address は、クラスメソッド has_one によって Customer モデルに追加されたインスタンスメソッドで、初期状態の HomeAddress オブジェクトをインスタンス化して自分自身と結び付けます。この段階では HomeAddress オブジェクトはデータベースに保存されません。このオブジェクトはフォームを表示するために利用されます
    @customer.build_home_address unless @customer.home_address
    @customer.build_work_address unless @customer.work_address %>

    <%# !  f.fields_for の 第一引数: アソシエーションまたは属性の参照： home_addressを使うことで、フォームがバインドされているメイン・オブジェクトのhome_addressアソシエーションまたはアトリビュートを参照していることになります。この名前は任意ではなく、実際のアソシエーション名または属性名と一致する必要があります。 %>
    <%# ¥ 第1引数が「アソシエーションまたは属性の参照」で、第2引数が対象となるオブジェクトです %>
<%= f.fields_for :home_address, f.object.customer.home_address do |ff| %>
  <%= markup do |m|
    p = AddressFormPresenter.new(ff, self)
    p.with_options(required: true) do |q|
      m << q.postal_code_block(:postal_code, "郵便番号", size: 7)
      m << q.drop_down_list_block(:prefecture, "都道府県",
        Address::PREFECTURE_NAMES)
      m << q.text_field_block(:city, "市区町村", size: 16)
      m << q.text_field_block(:address1, "町域、番地等", size: 40)
    end
    m << p.text_field_block(:address2, "建物名、部屋番号等", size: 40)
    m.div(class: "input-block") do
      m << p.decorated_label(:personal_phones, "電話番号")
      m.ol do
        p.object.phones.each_with_index do |phone, index|
          m << render("phone_fields", f: ff, phone: phone, index: index)
        end
      end
    end
  end %>
<% end %>
<%# ¥ このフォームの役割を思い出してください。 Customer モデル、 HomeAddress モデル、 WorkAddress モデルという3種類のモデルを同時に取り扱うフォームです。しかし、この部分テンプレートでは Customer モデルに関連するフィールドだけを生成します。そこで、 fields_for メソッドによって対象オブジェクトを切り替えたのです。  %>

<%# ¥ さて、 fields_for メソッドを用いるとフィールド名の形式が変化します。たとえば、 email 属性のフィールド名は、 form[customer][email] となります。先頭の form は「16.3.4 ERBテンプレート本体の作成」 で説明したプレフィックスです。1番目の角括弧内の customer が fields_for の第1引数で指定したレコード名です。そして2番目の角括弧内の email が属性名です。 %>

<%# ¥ この結果、フォームからの送信データを受け取るアクション側では、 params[:form][:customer][:email] というコードで基本情報セクションの email フィールドに記入された値を取得できることになります。また、 params[:form][:customer] というコードで基本情報セクションの各フィールドに記入された値を含むハッシュを取得できます。このハッシュは、そのまま Customer オブジェクトの assign_attributes メソッドに引数として指定できます。ただし、事前にStrong Parametersのフィルターを通す必要があります。  %>