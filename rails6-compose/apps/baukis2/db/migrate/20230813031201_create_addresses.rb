class CreateAddresses < ActiveRecord::Migration[6.0]
  def change
    create_table :addresses do |t|
      t.references :customer, null: false # 顧客への外部キー
      t.string :type, null: false #! 継承カラム
      t.string :postal_code, null: false # 郵便番号
      t.string :prefecture, null: false # 都道府県
      t.string :city, null: false # 市区町村
      t.string :address1, null: false # 町域、番地等
      t.string :address2, null: false # 建物名、部屋番号等
      t.string :company_name, null: false, default: "" # 会社名
      t.string :division_name, null: false, default: "" # 部署名

      t.timestamps
    end

    add_index :addresses, [ :type, :customer_id ], unique: true
    #- １対多 の場合、多側に外部キーを設定する! 20230813
    add_foreign_key :addresses, :customers
  end
end

# ! 20230813 外部キーの決定の仕方
# ¥ 外部キーは、リレーショナル・データベースのテーブル間のデータの整合性を保証するために使用される。外部キーは、あるテーブルから別のテーブルを指すことで、2つのテーブル間にリレーションシップを作成します。

# - この例では、customersとaddressの2つのテーブルがあります。顧客は1つ以上の住所を持つことができるという関係です。外部キーは、addressテーブルに追加され、customersテーブルを指すようになります。なぜなら、addressテーブルのすべての住所がcustomersテーブルの有効な顧客に属していることを保証したいからです。

# 外部キーをどこに配置するかを決定する一般的なアプローチを以下に示します：

#1 リレーションシップを決定します：

# テーブル A の 1 つのレコードは、テーブル B の 1 つのレコードに関連しています。
# 一対多（または多対一）： テーブル A の 1 つのレコードは、テーブル B の複数の関連レコードを持つことができる。
# 多対多： テーブル A の複数のレコードが、テーブル B の複数のレコードに関連付けられる (ジャンクションまたは結合テーブルが必要)。

#2 1対1のリレーションシップの場合：

# 外部キーは、最も論理的な意味を持つ側に配置する。多くの場合、"親 "テーブルと "子 "テーブルがあり、子テーブルは親テーブルを指す外部キーを持つ。

#¥ 3: 1対多のリレーションシップの場合：

# ¥ 外部キーは、リレーションシップの "多 "側に置かれます。一人の顧客が多くの住所を持つ場合、（"多 "側の）住所テーブルには、顧客テーブルを指す外部キーが含まれます。

#4 多対多のリレーションシップの場合：

# 中間テーブル（junctionまたはjoin）が必要です。このテーブルは、リレーションシップ内のメインテーブルの両方に対する外部キーを持ちます。例えば、studentとcoursesがあり、どの学生がどのコースに登録されているかを表現したい場合、studentテーブルとcoursesテーブルの両方を指す外部キーを持つstudent_coursesジャンクションテーブルが必要になります。

#5 所有権を考える：

# ¥ このエンティティは他のエンティティに "所属 "していますか？もしそうであれば、"所属 "するエンティティはその "所有者 "を指す外部キーを持っているはずです。例えば、住所は顧客に "属する "かもしれないので、住所は顧客を指す外部キーを持つべきである。

#6 削除と更新のカスケード：

# - 外部キーを設定する際には、親テーブルの変更（削除など）を子テーブルにカスケードさせたいかどうかも考慮しましょう。例えば、顧客が削除された場合、住所も自動的に削除されるべきでしょうか？

#7 必要に応じて、レビューとリファクタリングを行います：

# アプリケーションが進化するにつれて、テーブル間のリレーションシップが変化することに気づくかもしれません。アプリケーションの要件に最も合うように、必要に応じてデータベーススキーマをリファクタリングし、調整しても構いません。

# - まとめると、この例では外部キーを正しく配置しています。addresses テーブルには、customers テーブルを指す外部キーがあり、すべての住所が有効な顧客に属していることを保証します。